// <auto-generated />
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Data.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20171210234555_Initial08")]
    partial class Initial08
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Aplicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("NombreAplicacion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Aplicaciones");
                });

            modelBuilder.Entity("Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("paisId");

                    b.HasKey("Id");

                    b.HasIndex("paisId");

                    b.ToTable("Ciudad");
                });

            modelBuilder.Entity("Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Contactos");

                    b.Property<int>("DigitoVerificación");

                    b.Property<int>("IdTipoEmpresa");

                    b.Property<string>("Lema");

                    b.Property<string>("Mision");

                    b.Property<string>("Nit");

                    b.Property<string>("Nombre");

                    b.Property<string>("PathLogo");

                    b.Property<string>("Representante");

                    b.Property<string>("Telefono");

                    b.Property<string>("Vision");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoEmpresa");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Entities.HabitacionesDisponibles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Fecha");

                    b.Property<int?>("IdHotel");

                    b.Property<int?>("TotalHabitacionesDisponibles");

                    b.HasKey("Id");

                    b.HasIndex("IdHotel");

                    b.ToTable("HabitacionesDisponibles");
                });

            modelBuilder.Entity("Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdCiudad");

                    b.Property<int>("IdEmpresa");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("Entities.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("rolId");

                    b.HasKey("Id");

                    b.HasIndex("rolId");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("Entities.PermisoRecurso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Consultar");

                    b.Property<bool>("Crear");

                    b.Property<bool>("Editar");

                    b.Property<bool>("Eliminar");

                    b.Property<int>("permisoId");

                    b.HasKey("Id");

                    b.HasIndex("permisoId");

                    b.ToTable("PerfilRecursos");
                });

            modelBuilder.Entity("Entities.ReservaHabitacionCierre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdReservaHabitacion");

                    b.HasKey("Id");

                    b.HasIndex("IdReservaHabitacion");

                    b.ToTable("ReservaHabitacionCierre");
                });

            modelBuilder.Entity("Entities.ReservaHabitacionCierreVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdReservaHabitacionCierre");

                    b.Property<string>("NumeroVoucher");

                    b.HasKey("Id");

                    b.HasIndex("IdReservaHabitacionCierre");

                    b.ToTable("ReservaHabitacionCierreVoucher");
                });

            modelBuilder.Entity("Entities.ReservaHabitaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("IdCiudad");

                    b.Property<int>("IdHotel");

                    b.Property<bool>("Mascota");

                    b.Property<int>("NumeroHabitacionReservada");

                    b.Property<int>("NumeroPasajeros");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdHotel");

                    b.ToTable("ReservaHabitaciones");
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("aplicacionId");

                    b.HasKey("Id");

                    b.HasIndex("aplicacionId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entities.TipoEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TipoEmpresa");
                });

            modelBuilder.Entity("Entities.TipoIdentificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<string>("Codigo");

                    b.Property<string>("Nombre");

                    b.Property<string>("Siglas");

                    b.HasKey("Id");

                    b.ToTable("TipoIdentificacion");
                });

            modelBuilder.Entity("Entities.TipoNovedad", b =>
                {
                    b.Property<int>("IdTipoNovedad")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Activa");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("IdTipoNovedad");

                    b.ToTable("TipoNovedades");
                });

            modelBuilder.Entity("Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username")
                        .HasMaxLength(100);

                    b.Property<int>("empresaId");

                    b.Property<int>("rolId");

                    b.HasKey("Id");

                    b.HasIndex("empresaId");

                    b.HasIndex("rolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Entities.UsuarioRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("rolId");

                    b.Property<long>("usuarioId");

                    b.HasKey("Id");

                    b.HasIndex("rolId");

                    b.HasIndex("usuarioId");

                    b.ToTable("UsuarioRoles");
                });

            modelBuilder.Entity("Entities.Ciudad", b =>
                {
                    b.HasOne("Entities.Pais", "pais")
                        .WithMany()
                        .HasForeignKey("paisId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Empresa", b =>
                {
                    b.HasOne("Entities.TipoEmpresa", "TipoEmpresa")
                        .WithMany()
                        .HasForeignKey("IdTipoEmpresa")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.HabitacionesDisponibles", b =>
                {
                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("IdHotel");
                });

            modelBuilder.Entity("Entities.Hotel", b =>
                {
                    b.HasOne("Entities.Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Empresa", "empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Permiso", b =>
                {
                    b.HasOne("Entities.Rol", "rol")
                        .WithMany()
                        .HasForeignKey("rolId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.PermisoRecurso", b =>
                {
                    b.HasOne("Entities.Permiso", "permiso")
                        .WithMany()
                        .HasForeignKey("permisoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.ReservaHabitacionCierre", b =>
                {
                    b.HasOne("Entities.ReservaHabitaciones", "ReservaHabitacion")
                        .WithMany()
                        .HasForeignKey("IdReservaHabitacion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.ReservaHabitacionCierreVoucher", b =>
                {
                    b.HasOne("Entities.ReservaHabitacionCierre", "ReservaHabitacionCierre")
                        .WithMany()
                        .HasForeignKey("IdReservaHabitacionCierre")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.ReservaHabitaciones", b =>
                {
                    b.HasOne("Entities.Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("IdHotel")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.HasOne("Entities.Aplicacion", "aplicacion")
                        .WithMany()
                        .HasForeignKey("aplicacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Usuario", b =>
                {
                    b.HasOne("Entities.Empresa", "empresa")
                        .WithMany()
                        .HasForeignKey("empresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Rol", "rol")
                        .WithMany()
                        .HasForeignKey("rolId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.UsuarioRol", b =>
                {
                    b.HasOne("Entities.Rol", "rol")
                        .WithMany()
                        .HasForeignKey("rolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
